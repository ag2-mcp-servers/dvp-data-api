# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:33:36+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBearer

from models import (
    DataviewType,
    NamespaceData,
    NamespaceMetadata,
    PostUsers2FALoginErrorResponse,
    PostUsersLoginErrorResponse,
    PostUsersLoginSuccessResponse,
    ResponseData,
    TimespanData,
    TimespanModel,
    TimespanType,
    Users2FALoginRequest,
    UsersLoginRequest,
    YearData,
)

app = MCPProxy(
    description='The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.\n  \n#### Summary data\n\nIn your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). \n\nThere are two levels of summary data:\n\n- Repository-level, a summary of every namespace and repository\n- Tag- or digest-level, a summary of every namespace, repository, and reference\n  (tag or digest)\n\n The summary data formats contain the following data points:\n\n- Unique IP address count\n- Pulls by tag count\n- Pulls by digest count\n- Version check count\n\n#### Raw data\n\nIn your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.\n\n- Type (industry)\n- Host (cloud provider)\n- Country (geolocation)\n- Timestamp\n- Namespace\n- Repository\n- Reference (digest is always included, tag is provided when available)\n- HTTP request method\n- Action, one of the following:\n  - Pull by tag\n  - Pull by digest\n  - Version check\n- User-Agent\n',
    title='DVP Data API',
    version='1.0.0',
    servers=[
        {'url': 'https://hub.docker.com/api/publisher/analytics/v1'},
        {
            'url': 'https://docker.com/{version}',
            'variables': {'version': {'default': '1.33'}},
        },
    ],
)


@app.get(
    '/#-datamodel-code-generator-#-root-#-special-#',
    description=""" Gets a list of your namespaces and repos which have data available """,
    tags=['namespace_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_namespaces():
    """
    Get namespaces and repos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/namespaces/{namespace}',
    description=""" Gets metadata associated with specified namespace, including extra repos associated with the namespace """,
    tags=['namespace_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_namespace(namespace: str):
    """
    Get namespace
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/namespaces/{namespace}/pulls/exports/years',
    description=""" Gets a list of years that have data for the given namespace """,
    tags=['namespace_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_namespace_years(namespace: str):
    """
    Get years with data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}',
    description=""" Gets a list of timespans of the given type that have data for the given namespace and year """,
    tags=['namespace_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_namespace_timespans(
    namespace: str, year: int = ..., timespantype: TimespanType = ...
):
    """
    Get timespans with data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}',
    description=""" Gets info about data for the given namespace and timespan """,
    tags=['namespace_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_namespace_timespan_metadata(
    namespace: str,
    year: int = ...,
    timespantype: TimespanType = ...,
    timespan: int = ...,
):
    """
    Get namespace metadata for timespan
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}/{dataview}',
    description=""" Gets a list of URLs that can be used to download the pull data for the given namespace and timespan """,
    tags=['namespace_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_namespace_data_by_timespan(
    namespace: str,
    year: int = ...,
    timespantype: TimespanType = ...,
    timespan: int = ...,
    dataview: DataviewType = ...,
):
    """
    Get namespace data for timespan
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/users/2fa-login',
    description=""" When a user has 2FA enabled, this is the second call to perform after
`/v2/users/login` call.

Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.

The returned token is used in the HTTP Authorization header like `Authorization: Bearer {TOKEN}`.

Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository.
 """,
    tags=['user_authentication_processes'],
)
def post_users2_f_a_login(body: Users2FALoginRequest):
    """
    Second factor authentication.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/users/login',
    description=""" Creates and returns a bearer token in JWT format that you can use to
authenticate with Docker Hub APIs.

The returned token is used in the HTTP Authorization header like `Authorization: Bearer {TOKEN}`.

Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository.
 """,
    tags=['user_authentication_processes'],
)
def post_users_login(body: UsersLoginRequest):
    """
    Create an authentication token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
